generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PhoneNumber {
  id         String    @id @default(cuid())
  number     String    @unique
  status     Status    @default(ACTIVE)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  lastCalled DateTime?
  callCount  Int       @default(0)
  calls      Call[]
}

model Call {
  id            String      @id @default(cuid())
  startTime     DateTime    @default(now())
  endTime       DateTime?
  duration      Int?
  status        CallStatus  @default(INITIATED)
  direction     Direction   @default(OUTBOUND)
  phoneNumberId String
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  phoneNumber   PhoneNumber @relation(fields: [phoneNumberId], references: [id], onDelete: Cascade)
  recording     Recording?
}

model Recording {
  id            String         @id @default(cuid())
  callId        String         @unique
  fileUrl       String
  fileSize      Int?
  duration      Int?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  call          Call           @relation(fields: [callId], references: [id], onDelete: Cascade)
  transcription Transcription?
}

model Transcription {
  id          String              @id @default(cuid())
  recordingId String              @unique
  text        String
  status      TranscriptionStatus @default(PENDING)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  answers     Answer[]
  questions   Question[]
  recording   Recording           @relation(fields: [recordingId], references: [id], onDelete: Cascade)
}

model Question {
  id              String         @id @default(cuid())
  transcriptionId String?
  text            String
  order           Int
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  answers         Answer[]
  transcription   Transcription? @relation(fields: [transcriptionId], references: [id], onDelete: Cascade)
}

model Answer {
  id              String        @id @default(cuid())
  questionId      String
  text            String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  transcriptionId String
  question        Question      @relation(fields: [questionId], references: [id])
  transcription   Transcription @relation(fields: [transcriptionId], references: [id])
}

model Redirect {
  id        String   @id @default(cuid())
  number    String?  @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  ACTIVE
  INACTIVE
}

enum CallStatus {
  INITIATED
  RINGING
  IN_PROGRESS
  COMPLETED
  FAILED
  MISSED
  BUSY
  NO_ANSWER
}

enum Direction {
  INBOUND
  OUTBOUND
}

enum TranscriptionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}
